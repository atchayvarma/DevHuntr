package tech.tamilanapps.devhuntr.database.dao

import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.filters.SmallTest
import com.google.common.truth.Truth.assertThat
import dagger.hilt.android.testing.HiltAndroidRule
import dagger.hilt.android.testing.HiltAndroidTest
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runBlockingTest
import org.junit.After
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.JUnit4
import tech.tamilanapps.devhuntr.database.db.FrameWorkDatabase
import tech.tamilanapps.devhuntr.database.entity.FrameWorkEntity
import javax.inject.Inject
import javax.inject.Named


@HiltAndroidTest
@SmallTest
class FrameworkDaoTest {

    @Inject
    @Named("test_db")
    lateinit var frameWorkDatabase:FrameWorkDatabase

    lateinit var frameWorkDao: FrameWorkDao

    @get:Rule
    var hiltRule = HiltAndroidRule(this)
    
    @get:Rule
    var instantTaskExecutorRule = InstantTaskExecutorRule()

    @Before
    fun init(){
       hiltRule.inject()
        frameWorkDao = frameWorkDatabase.frameworkDao()
    }

    @After
    fun teardown(){
        frameWorkDatabase.close()
    }

    @ExperimentalCoroutinesApi
    @Test
    fun insertFrameworkTest() = runBlockingTest{

        val frameWork = FrameWorkEntity(
            framework = "Android", frameworkEndpoint = "androidDocs"
        )

        frameWorkDao.insertFramework(frameWork)
        val frameWorkQuery = frameWorkDao.getFramework()

        /** NOTE: Not checking the primary key because that is auto generated by Room and that is making issues in testing */
        assertThat(frameWorkQuery.framework).isEqualTo(frameWork.framework)
        assertThat(frameWorkQuery.frameworkEndpoint).isEqualTo(frameWork.frameworkEndpoint)
        
    }

    @Test
    fun getFrameworkTest() = runBlockingTest {

        val frameWork = FrameWorkEntity(
            framework = "Android", frameworkEndpoint = "androidDocs"
        )
        frameWorkDao.insertFramework(frameWork)


        val frameworkQuery = frameWorkDao.getFramework()
        assertThat(frameworkQuery).isNotNull()
    }
}